cadena1='ATGCGCTCCCTCCTGCTTCTCAGCGCCTTCTGCCTCCTGGAGGCGGCCCTGGCCGCCGAGGTGAAGAAACCTGCAGCCGCAGCAGCTCCTGGCACTGCGGAGAAGTTGAGCCCCAAGGCGGCCACGCTTGCCGAGCGCAGCGCCGGCCTGGCCTTCAGCTTGTACCAGGCCATGGCCAAGGACCAGGCAGTGGAGAACATCCTGGTGTCACCCGTGGTGGTGGCCTCGTCGCTAGGGCTCGTGTCGCTGGGCGGCAAGGCGACCACGGCGTCGCAGGCCAAGGCAGTGCTGAGCGCCGAGCAGCTGCGCGACGAGGAGGTGCACGCCGGCCTGGGCGAGCTGCTGCGCTCACTCAGCAACTCCACGGCGCGCAACGTGACCTGGAAGCTGGGCAGCCGACTGTACGGACCCAGCTCAGTGAGCTTCGCTGATGACTTCGTGCGCAGCAGCAAGCAGCACTACAACTGCGAGCACTCCAAGATCAACTTCCGCGACAAGCGCAGCGCGCTGCAGTCCATCAACGAGTGGGCCGCGCAGACCACCGACGGCAAGCTGCCCGAGGTCACCAAGGACGTGGAGCGCACGGACGGCGCCCTGCTAGTCAACGCCATGTTCTTCAAGCCACACTGGGATGAGAAATTCCACCACAAGATGGTGGACAACCGTGGCTTCATGGTGACTCGGTCCTATACCGTGGGTGTCATGATGATGCACCGGACAGGCCTCTACAACTACTACGACGACGAGAAGGAAAAGCTGCAAATCGTGGAGATGCCCCTGGCCCACAAGCTCTCCAGCCTCATCATCCTCATGCCCCATCACGTGGAGCCTCTCGAGCGCCTTGAAAAGCTGCTAACCAAAGAGCAGCTGAAGATCTGGATGGGGAAGATGCAGAAGAAGGCTGTTGCCATCTCCTTGCCCAAGGGTGTGGTGGAGGTGACCCATGACCTGCAGAAACACCTGGCTGGGCTGGGCCTGACTGAGGCCATTGACAAGAACAAGGCCGACTTGTCACGCATGTCAGGCAAGAAGGACCTGTACCTGGCCAGCGTGTTCCACGCCACCGCCTTTGAGTTGGACACAGATGGCAACCCCTTTGACCAGGACATCTACGGGCGCGAGGAGCTGCGCAGCCCCAAGCTGTTCTACGCCGACCACCCCTTCATCTTCCTAGTGCGGGACACCCAAAGCGGCTCCCTGCTATTCATTGGGCGCCTGGTCCGGCCTAAGGGTGACAAGATGCGAGACGAGTTATAG';cadena2='ATGACCATGGTTGACACAGAGATGCCATTCTGGCCCACCAACTTTGGGATCAGCTCCGTGGATCTCTCCGTAATGGAAGACCACTCCCACTCCTTTGATATCAAGCCCTTCACTACTGTTGACTTCTCCAGCATTTCTACTCCACATTACGAAGACATTCCATTCACAAGAACAGATCCAGTGGTTGCAGATTACAAGTATGACCTGAAACTTCAAGAGTACCAAAGTGCAATCAAAGTGGAGCCTGCATCTCCACCTTATTATTCTGAGAAGACTCAGCTCTACAATAAGCCTCATGAAGAGCCTTCCAACTCCCTCATGGCAATTGAATGTCGTGTCTGTGGAGATAAAGCTTCTGGATTTCACTATGGAGTTCATGCTTGTGAAGGATGCAAGGGTTTCTTCCGGAGAACAATCAGATTGAAGCTTATCTATGACAGATGTGATCTTAACTGTCGGATCCACAAAAAAAGTAGAAATAAATGTCAGTACTGTCGGTTTCAGAAATGCCTTGCAGTGGGGATGTCTCATAATGCCATCAGGTTTGGGCGGATGCCACAGGCCGAGAAGGAGAAGCTGTTGGCGGAGATCTCCAGTGATATCGACCAGCTGAATCCAGAGTCCGCTGACCTCCGGGCCCTGGCAAAACATTTGTATGACTCATACATAAAGTCCTTCCCGCTGACCAAAGCAAAGGCGAGGGCGATCTTGACAGGAAAGACAACAGACAAATCACCATTCGTTATCTATGACATGAATTCCTTAATGATGGGAGAAGATAAAATCAAGTTCAAACACATCACCCCCCTGCAGGAGCAGAGCAAAGAGGTGGCCATCCGCATCTTTCAGGGCTGCCAGTTTCGCTCCGTGGAGGCTGTGCAGGAGATCACAGAGTATGCCAAAAGCATTCCTGGTTTTGTAAATCTTGACTTGAACGACCAAGTAACTCTCCTCAAATATGGAGTCCACGAGATCATTTACACAATGCTGGCCTCCTTGATGAATAAAGATGGGGTTCTCATATCCGAGGGCCAAGGCTTCATGACAAGGGAGTTTCTAAAGAGCCTGCGAAAGCCTTTTGGTGACTTTATGGAGCCCAAGTTTGAGTTTGCTGTGAAGTTCAATGCACTGGAATTAGATGACAGCGACTTGGCAATATTTATTGCTGTCATTATTCTCAGTGGAGACCGCCCAGGTTTGCTGAATGTGAAGCCCATTGAAGACATTCAAGACAACCTGCTACAAGCCCTGGAGCTCCAGCTGAAGCTGAACCACCCTGAGTCCTCACAGCTGTTTGCCAAGCTGCTCCAGAAAATGACAGACCTCAGACAGATTGTCACGGAACACGTGCAGCTACTGCAGGTGATCAAGAAGACGGAGACAGACATGAGTCTTCACCCGCTCCTGCAGGAGATCTACAAGGACTTGTACTAG';%cadena1='ATTACG'subcadenas1=[];subcadena=[];hamming1=[];palabra_hamming=[];for i=1:1:length(cadena1)    switch(cadena1(i))        case 'A'            letra=[sqrt(2) 0 0 0];            hamin=[1 0 0 0];        case 'T'            letra=[0 sqrt(2) 0 0];            hamin=[0 1 0 0];        case 'G'            letra=[0 0 2 0];            hamin=[0 0 1 0];        case 'C'            letra=[0 0 0 2];            hamin=[0 0 0 1];   end   subcadena=[subcadena letra];   palabra_hamming=[palabra_hamming hamin];    if i>=27        subcadenas1=[subcadenas1;subcadena];        subcadena(1:4)=[];        hamming1=[hamming1;palabra_hamming];        palabra_hamming(1:4)=[];    endendsubcadenas2=[];subcadena=[];hamming2=[];palabra_hamming=[];for i=1:1:length(cadena2)    switch(cadena2(i))        case 'A'            letra=[sqrt(2) 0 0 0];            hamin=[1 0 0 0];        case 'T'            letra=[0 sqrt(2) 0 0];            hamin=[0 1 0 0];        case 'G'            letra=[0 0 2 0];            hamin=[0 0 1 0];        case 'C'            letra=[0 0 0 2];            hamin=[0 0 0 1];   end    subcadena=[subcadena letra];   palabra_hamming=[palabra_hamming hamin];    if i>=27        subcadenas2=[subcadenas2;subcadena];        subcadena(1:4)=[];        hamming2=[hamming2;palabra_hamming];        palabra_hamming(1:4)=[];    endend%subcadenas1%subcadenas2[r1,c1]=size(subcadenas1);[r2,c2]=size(subcadenas2);%subcadenas1(1,:);%subcadenas2(1,:);mayor=0;mejor=100;mejor_i=0;mejor_j=0;mejor_j2=0;r1r2%para todos los HSP47 su tm respecto a el primer HSP47for j=1:1:r1        valor=27-dot(hamming1(2,:),hamming1(j,:));        vector_hsp(j,1)=valor;        vector_hsp(j,2)=j;        end%ordenamos las tm de HSP47 con respecto al primer HSP47vector_ordena_hsp=sortrows(vector_hsp);%para todos los HSP47 su tm respecto a los pparfor j=1:1:r2        valor=27-dot(hamming1(1,:),hamming2(j,:));        vector_ppar(j,1)=valor;        vector_ppar(j,2)=j;end%ordenamos las tm de los ppar con respecto al primer HSP47vector_ordena_ppar=sortrows(vector_ppar);%x_max_inicial=vector_ordena_hsp(1,1)+vector_ordena_ppar(1,1);%x_min_inicial=abs(vector_ordena_hsp(1,1)-vector_ordena_ppar(1,1));tm_i=dot(subcadenas1(vector_ordena_hsp(1,2),:),subcadenas2(vector_ordena_ppar(1,2),:))i_final=1;pasos=0;repeticiones=0;for i=1:1:r1  tm_max=0;   dh=vector_ordena_hsp(i,1)   j=1;   x_max_inicial=vector_ordena_hsp(i,1)+vector_ordena_ppar(1,1);   x_min=(dh-vector_ordena_ppar(j,1));   if x_min<0    x_min=0;   end   while (j<=r2 &&(x_min<=x_max_inicial))   vector_ordena_ppar(j,1)    x_max=dh+vector_ordena_ppar(j,1);    x_min=(dh-vector_ordena_ppar(j,1));    if x_min<0      x_min=0;    end    tm=dot(subcadenas1(vector_ordena_hsp(i,2),:),subcadenas2(vector_ordena_ppar(j,2),:));    if(tm>tm_max)      vector_ordena_ppar(j,1);      tm_max=tm;      repeticiones=0;    end    if(tm==tm_max)      repeticiones++;    end    j=j+1;     pasos=pasos+1;  end  j  if(tm_max<=tm_i&& tm_max>0)    tm_i=tm_max    i_final=i      if(repeticiones<=mejor_rep)        mejor_rep=repeticiones;        cadena1(vector_ordena_hsp(i_final,2):(vector_ordena_hsp(i_final,2)+26))      end  endendtm_ipasos